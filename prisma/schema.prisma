generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  last_name          String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  role               Role            @relation(fields: [role_name], references: [name])
  role_name          String          @default("USER")
  preference         User_Preference? @relation(fields: [user_preference_id], references: [id])
  user_preference_id String?          @unique
  staffings          Staffing[]
  backups            Backup[]
  accounts           Account[]
  sessions           Session[]
  OpenStaffing       OpenStaffing[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User_Preference {
  id                        String                @id @default(cuid())
  shift_type_id             String?
  shift_type                Shift_Type?           @relation(fields: [shift_type_id], references: [id])
  absence                   Absence[]
  availability_even_week    AvailabilityEvenWeek  @relation(fields: [availability_even_week_id], references: [id])
  availability_even_week_id String                @unique
  availability_odd_week     AvailabilityOddWeek?
  availability_flexible     AvailabilityFlexible?
  User                      User[]
}

model AvailabilityEvenWeek {
  id           String           @id @default(cuid())
  preference   User_Preference?
  availability Availability[]
}

model AvailabilityOddWeek {
  id            String          @id @default(cuid())
  preference    User_Preference @relation(fields: [preference_id], references: [id])
  preference_id String          @unique
  availability  Availability[]
}

model AvailabilityFlexible {
  id            String          @id @default(cuid())
  preference    User_Preference @relation(fields: [preference_id], references: [id])
  preference_id String          @unique
  availability  Availability[]
}

model Availability {
  id                            String                @id @default(cuid())
  weekday                       Int
  availability_even_week        AvailabilityEvenWeek? @relation(fields: [availability_even_week_id], references: [id])
  availability_even_week_id     String?
  availability_odd_week         AvailabilityOddWeek?  @relation(fields: [availability_odd_week_id], references: [id])
  availability_odd_week_id      String?
  availability_flexible_week    AvailabilityFlexible? @relation(fields: [availability_flexible_week_id], references: [id])
  availability_flexible_week_id String?
  shift_types                   Shift_Type[]

  @@unique([weekday, availability_even_week_id, availability_odd_week_id, availability_flexible_week_id])
}

model Absence {
  id            String          @id @default(cuid())
  start         DateTime
  end           DateTime
  reason        String
  preference_id String
  preference    User_Preference @relation(fields: [preference_id], references: [id])
}

model Role {
  name        String @id
  description String
  users       User[]
}

model Shift {
  id             String           @id @default(cuid())
  start          DateTime
  end            DateTime
  staffings      Staffing[]
  staff_required Staff_Required[]
  Backup         Backup[]
  isOpen         Boolean          @default(true)
  OpenStaffing   OpenStaffing[]

  @@unique([start, end])
}

model Staffing {
  id            String     @id @default(cuid())
  shift_id      String
  shift_type_id String
  user_id       String
  shift         Shift      @relation(fields: [shift_id], references: [id], onDelete: Cascade)
  shift_type    Shift_Type @relation(fields: [shift_type_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])

  @@unique([shift_id, user_id])
}

model OpenStaffing {
  id             String     @id @default(cuid())
  absent_user    User?      @relation(fields: [userId], references: [id])
  absent_user_id String?
  shift_id       String
  shift_type_id  String
  shift          Shift      @relation(fields: [shift_id], references: [id])
  shift_type     Shift_Type @relation(fields: [shift_type_id], references: [id])
  userId         String?
}

model Backup {
  id      String   @id @default(cuid())
  user_id String
  date    DateTime @unique
  user    User     @relation(fields: [user_id], references: [id])
  Shift   Shift?   @relation(fields: [shiftId], references: [id])
  shiftId String?

  @@unique([user_id, date])
}

model Staff_Required {
  id            String     @id @default(cuid())
  amount        Int
  shift_id      String
  shift_type_id String
  shift         Shift      @relation(fields: [shift_id], references: [id], onDelete: Cascade)
  shift_type    Shift_Type @relation(fields: [shift_type_id], references: [id])

  @@unique([shift_id, shift_type_id])
}

model Shift_Type {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  availability     Availability[]
  staffings        Staffing[]
  staff_required   Staff_Required[]
  user_preferences User_Preference[]
  open_staffing    OpenStaffing[]
}
