generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  last_name     String?
  email         String?          @unique
  emailVerified DateTime?
  role          Role             @relation(fields: [role_name], references: [name])
  role_name     String           @default("USER")
  preference    User_Preference?
  staffings     Staffing[]
  backups       Backup[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User_Preference {
  id              String           @id @default(cuid())
  shift_type_id   String
  user_id         String           @unique
  shift_type      Shift_Type       @relation(fields: [shift_type_id], references: [id])
  absence         Absence[]
  evenWeek        EvenWeek         @relation(fields: [evenWeek_id], references: [id])
  evenWeek_id     String           @unique
  oddWeek         OddWeek?
  reservationWeek ReservationWeek?
  user            User             @relation(fields: [user_id], references: [id])
}

model EvenWeek {
  id           String           @id @default(cuid())
  preference   User_Preference?
  availability Availability[]
}

model OddWeek {
  id            String          @id @default(cuid())
  preference    User_Preference @relation(fields: [preference_id], references: [id])
  preference_id String          @unique
  availability  Availability[]
}

model ReservationWeek {
  id            String          @id @default(cuid())
  preference    User_Preference @relation(fields: [preference_id], references: [id])
  preference_id String          @unique
  availability  Availability[]
}

model Availability {
  id                  String           @id @default(cuid())
  weekday             Int
  even_week_id        String?
  even_week           EvenWeek?        @relation(fields: [even_week_id], references: [id])
  odd_week_id         String?
  odd_week            OddWeek?         @relation(fields: [odd_week_id], references: [id])
  reservation_week_id String?
  reservation_week    ReservationWeek? @relation(fields: [reservation_week_id], references: [id])
  shift_types         Shift_Type[]

  @@unique([weekday, even_week_id, odd_week_id, reservation_week_id])
}

model Absence {
  id            String          @id @default(cuid())
  start         DateTime
  end           DateTime
  reason        String
  preference_id String
  preference    User_Preference @relation(fields: [preference_id], references: [id])
}

model Role {
  name        String @id
  description String
  users       User[]
}

model Shift {
  id             String           @id @default(cuid())
  start          DateTime
  end            DateTime
  staffings      Staffing[]
  staff_required Staff_Required[]
  Backup         Backup[]
  isOpen         Boolean          @default(true)

  @@unique([start, end])
}

model Staffing {
  id            String     @id @default(cuid())
  shift_id      String
  shift_type_id String
  user_id       String
  shift         Shift      @relation(fields: [shift_id], references: [id])
  shift_type    Shift_Type @relation(fields: [shift_type_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])

  @@unique([shift_id, user_id])
}

model Backup {
  id       String   @id @default(cuid())
  user_id  String
  date     DateTime @unique
  user     User     @relation(fields: [user_id], references: [id])
  shift_id String?
  shift    Shift?   @relation(fields: [shift_id], references: [id])

  @@unique([user_id, date])
  @@unique([user_id, shift_id])
}

model Staff_Required {
  id            String     @id @default(cuid())
  amount        Int
  shift_id      String
  shift_type_id String
  shift         Shift      @relation(fields: [shift_id], references: [id])
  shift_type    Shift_Type @relation(fields: [shift_type_id], references: [id])

  @@unique([shift_id, shift_type_id])
}

model Shift_Type {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  availability     Availability[]
  staffings        Staffing[]
  staff_required   Staff_Required[]
  user_preferences User_Preference[]
}
