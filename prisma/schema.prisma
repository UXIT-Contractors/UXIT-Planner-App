generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  first_name    String?
  last_name     String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  role          Role             @relation(fields: [role_name], references: [name])
  role_name     String           @default("USER")
  preference    User_Preference?
  staffings     Staffing[]
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
}

//THIS IS AN EXAMPLE OF A MODEL IT SHOULD BE REMOVED
model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  userName  String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User_Preference {
  id            String         @id @default(cuid())
  maxStaffings  Int
  shift_type_id String
  user_id       String         @unique
  shift_type    Shift_Type     @relation(fields: [shift_type_id], references: [id])
  absence       Absence[]
  availability  Availability[]
  user          User           @relation(fields: [user_id], references: [id])
}

model Availability {
  id            String          @id @default(cuid())
  sequence_week Int             @default(0)
  weekday       Int
  preference_id String
  preference    User_Preference @relation(fields: [preference_id], references: [id])
  shift_types   Shift_Type[]

  @@unique([preference_id, weekday, sequence_week])
}

model Absence {
  id            String          @id @default(cuid())
  start         DateTime
  end           DateTime
  reason        String
  preference_id String
  preference    User_Preference @relation(fields: [preference_id], references: [id])
}

model Role {
  name        String @id
  description String
  users       User[]
}

model Shift {
  id             String           @id @default(cuid())
  start          DateTime
  end            DateTime
  staffings      Staffing[]
  staff_required Staff_Required[]
}

model Staffing {
  id            String     @id @default(cuid())
  shift_id      String
  shift_type_id String
  user_id       String
  shift         Shift      @relation(fields: [shift_id], references: [id])
  shift_type    Shift_Type @relation(fields: [shift_type_id], references: [id])
  user          User       @relation(fields: [user_id], references: [id])
}

model Staff_Required {
  id            String     @id @default(cuid())
  amount        Int
  shift_id      String
  shift_type_id String
  shift         Shift      @relation(fields: [shift_id], references: [id])
  shift_type    Shift_Type @relation(fields: [shift_type_id], references: [id])
}

model Shift_Type {
  id                    String        @id @default(cuid())
  name                  String        @unique
  description           String
  availability          Availability[]
  staffings             Staffing[]
  staff_required        Staff_Required[]
  user_preferences      User_Preference[]
}
